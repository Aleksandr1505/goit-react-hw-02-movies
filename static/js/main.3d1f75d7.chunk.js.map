{"version":3,"sources":["components/MovieCard/MovieCard.module.css","components/MovieGrid/MovieGrid.module.css","components/SearchBar/SearchBar.module.css","components/MovieCard/MovieCard.js","components/MovieGrid/MovieGrid.js","components/SearchBar/SearchBar.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieCard","item","title","posterUrl","overview","className","styles","movieCard","src","alt","content","descr","MovieGrid","items","movieGrid","map","key","id","SearchBar","valueInput","handleChangeInput","name","type","value","input","onChange","App","state","films","filter","changedFilter","e","setState","target","this","filteredFilms","film","toLowerCase","includes","filterFilms","length","style","fontWeight","marginLeft","fontSize","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8HACAA,EAAOC,QAAU,CAAC,UAAY,6BAA6B,QAAU,2BAA2B,MAAQ,yBAAyB,MAAQ,2B,qBCAzID,EAAOC,QAAU,CAAC,UAAY,+B,gBCA9BD,EAAOC,QAAU,CAAC,MAAQ,2B,kjbCyBXC,EAtBG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACXC,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,UAAWC,EAAaH,EAAbG,SAC1B,OACE,yBAAKC,UAAWC,IAAOC,WACrB,yBAAKC,IAAKL,EAAWM,IAAI,WACzB,yBAAKJ,UAAWC,IAAOI,SACrB,wBAAIL,UAAWC,IAAOJ,OAAQA,GAC9B,uBAAGG,UAAWC,IAAOK,OAAQP,M,gBCiBtBQ,EAvBG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OACE,wBAAIR,UAAWC,IAAOQ,WACnBD,EAAME,IAAI,SAAAd,GAAI,OACb,wBAAIe,IAAKf,EAAKgB,IACZ,kBAAC,EAAD,CAAWhB,KAAMA,S,gBCOZiB,EAbG,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,kBAAf,OAChB,2BACEC,KAAK,QACLC,KAAK,OACLC,MAAOJ,EACPd,UAAWC,IAAOkB,MAClBC,SAAUL,K,OC4BCM,E,2MA1BbC,MAAQ,CACNC,MAAOf,EACPgB,OAAQ,K,EAGVC,cAAgB,SAAAC,GACd,EAAKC,SAAS,CAAEH,OAAQE,EAAEE,OAAOV,S,wEAGzB,IAAD,EACmBW,KAAKP,MAAvBC,EADD,EACCA,MAAOC,EADR,EACQA,OACTM,EAlBU,SAACP,EAAOC,GAC1B,OAAOD,EAAMC,OAAO,SAAAO,GAAI,OACtBA,EAAKlC,MAAMmC,cAAcC,SAAST,EAAOQ,iBAgBnBE,CAAYX,EAAOC,GACzC,OACE,6BACE,kBAAC,EAAD,CAAWV,WAAYU,EAAQT,kBAAmBc,KAAKJ,gBACvD,kBAAC,EAAD,CAAWjB,MAAOsB,IACQ,IAAzBA,EAAcK,QACb,uBAAGC,MAAO,CAAEC,WAAY,IAAKC,WAAY,GAAIC,SAAU,KAAvD,6B,GAlBQC,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3d1f75d7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"movieCard\":\"MovieCard_movieCard__1vnFU\",\"content\":\"MovieCard_content__Kfg1L\",\"title\":\"MovieCard_title__3YITO\",\"descr\":\"MovieCard_descr__3RjxK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movieGrid\":\"MovieGrid_movieGrid__bkiWv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SearchBar_input__I7h6d\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './MovieCard.module.css';\n\nconst MovieCard = ({ item }) => {\n  const { title, posterUrl, overview } = item;\n  return (\n    <div className={styles.movieCard}>\n      <img src={posterUrl} alt=\"poster\" />\n      <div className={styles.content}>\n        <h2 className={styles.title}>{title}</h2>\n        <p className={styles.descr}>{overview}</p>\n      </div>\n    </div>\n  );\n};\n\nMovieCard.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    posterUrl: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieCard from '../MovieCard/MovieCard';\nimport styles from './MovieGrid.module.css';\n\nconst MovieGrid = ({ items }) => {\n  return (\n    <ul className={styles.movieGrid}>\n      {items.map(item => (\n        <li key={item.id}>\n          <MovieCard item={item} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMovieGrid.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      posterUrl: PropTypes.string.isRequired,\n      overview: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default MovieGrid;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './SearchBar.module.css';\n\nconst SearchBar = ({ valueInput, handleChangeInput }) => (\n  <input\n    name=\"value\"\n    type=\"text\"\n    value={valueInput}\n    className={styles.input}\n    onChange={handleChangeInput}\n  />\n);\nSearchBar.propTypes = {\n  valueInput: PropTypes.string.isRequired,\n  handleChangeInput: PropTypes.func.isRequired,\n};\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport MovieGrid from './MovieGrid/MovieGrid';\nimport SearchBar from './SearchBar/SearchBar';\nimport items from './movies.json';\n\nconst filterFilms = (films, filter) => {\n  return films.filter(film =>\n    film.title.toLowerCase().includes(filter.toLowerCase()),\n  );\n};\n\nclass App extends Component {\n  state = {\n    films: items,\n    filter: ' ',\n  };\n\n  changedFilter = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  render() {\n    const { films, filter } = this.state;\n    const filteredFilms = filterFilms(films, filter);\n    return (\n      <div>\n        <SearchBar valueInput={filter} handleChangeInput={this.changedFilter} />\n        <MovieGrid items={filteredFilms} />\n        {filteredFilms.length === 0 && (\n          <p style={{ fontWeight: 700, marginLeft: 10, fontSize: 20 }}>\n            No matching results!\n          </p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}